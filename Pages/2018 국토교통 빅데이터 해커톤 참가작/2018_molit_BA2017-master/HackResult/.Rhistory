nodes$color.highlight.border <- "darkred"
edges$width = 1+d()$weight/8
edges$color = 'grey'
# Draw circle plot
return(
visNetwork(nodes, edges, width='100%',height='950px') %>%
visOptions(highlightNearest = TRUE,
selectedBy = "org",autoResize = TRUE) %>%
visInteraction(navigationButtons = TRUE,dragNodes = TRUE,
dragView = TRUE, zoomView = TRUE) %>%
visLegend() %>%
visIgraphLayout(layout = "layout_with_mds", physics = FALSE,
smooth = FALSE, type = "square", randomSeed = NULL,
layoutMatrix = NULL)
)
})
#build whole network graph
output$wg = renderVisNetwork(wg)
#get catname
output$catname = renderText(paste0(input$cat,' 연관 데이터 테이블'))
#build whole network graph
ap_df = reactive({
apriori_results(input$cat)
})
output$recommend =  DT::renderDataTable(DT::datatable({
data = sapply(ap_df(),function(x){gsub("\'","",x)}) %>% as.data.frame
}))
w2vd = eventReactive(input$dow2v,{
w2v(input$service_question)
})
output$w2vres = DT::renderDataTable(DT::datatable({
data = w2vd()
}))
}
#################################################
###Run Shiny App
#################################################
shinyApp(ui,server)
ui = fluidPage(
#Define main title
titlePanel('엣지있게'),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput('cat','서비스 카테고리 :',choices = unique(df$service_category),
selected = unique(df$service_category)[1]),
actionButton('dographbutton','카테고리별 그래프 그리기'),br(),br(),
uiOutput('select_org')
),
#Main panel of sidebar layout
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel('전체 네트워크',br(),
fluidRow(
column(6, align="center", offset = 3,
actionButton('update','UPDATE'),
tags$style(type='text/css', "#button { vertical-align- middle; height- 50px; width- 100%; font-size- 30px;}")
)),
br(),
visNetworkOutput('wg',height = '600px')
),
tabPanel("카테고리별 네트워크",
h2('서비스 카테고리 별 네트워크'),
br(),br(),
visNetworkOutput('catgraph',height = '500px'),br(),
h2(textOutput('catname')),br(),
DT::dataTableOutput('recommend')
),
tabPanel("API 데이터 정보",h2('API 데이터 추천'),br(),
textAreaInput('service_question','무슨 서비스를 하고 싶으신가요?',
width = 600,height = 160),
actionButton("dow2v", "답변 해주기", icon = icon("comments")),br(),br(),
DT::dataTableOutput('w2vres')
)
)
)
)
)
server = function(input,output){
#build primitive dataframe based on category
dprime = reactive({
df[which(df$service_category == input$cat),]
})
#update organization selection
output$select_org = renderUI({
checkboxGroupInput('org','제공 기관 :', choices = c('All',dprime() %>% select(start_org,end_org)%>%
unlist%>% unique),selected = 'All')
})
#make desired dataframe(start,edge with organization sorted)
d = eventReactive(input$dographbutton,{
if(TRUE %in% (input$org == 'All')){
df[which(df$service_category == input$cat),]
}
else{
df[which(df$service_category == input$cat),] %>%
filter(start_org %in%  input$org |
end_org %in% input$org)
}
})
#build visnetwork
output$catgraph = renderVisNetwork({
# Make Edges & Nodes
start_nodes = get_start(d())
end_nodes = get_end(d())
nodes =  get_nodes(start_nodes,end_nodes)
edges <- d() %>% select(start, end) %>% rename(from = start, to = end)
node.exp = left_join(nodes,df3[which(unique(df3$id) %in% nodes$id),c(3,1)],by = 'id') %>%
group_by(id) %>% filter(row_number(id)==1)
degree = graph_from_data_frame(d(),directed = F) %>% degree()
degree = data.frame(id = names(degree),degree = degree)
# Allocate informations on network
nodes$color.background <- rainbow_hcl(length(levels(factor(nodes$org))))[factor(nodes$org)]
nodes$title = paste0("데이터명 : ",nodes$id,"<br/>",
'출처 : ',nodes$org,"<br/>",
'같이 사용된 데이터 수 : ',degree[match(nodes$id,degree$id),'degree'],
ifelse(is.na(node.exp$explain)|node.exp$explain=="",'',paste0("<br/>",
'데이터 설명 : ',node.exp$explain)))
nodes$color.border <- "black"
nodes$color.highlight.background <- "orange"
nodes$color.highlight.border <- "darkred"
edges$width = 1+d()$weight/8
edges$color = 'grey'
# Draw circle plot
return(
visNetwork(nodes, edges, width='100%',height='950px') %>%
visOptions(highlightNearest = TRUE,
selectedBy = "org",autoResize = TRUE) %>%
visInteraction(navigationButtons = TRUE,dragNodes = TRUE,
dragView = TRUE, zoomView = TRUE) %>%
visLegend() %>%
visIgraphLayout(layout = "layout_with_mds", physics = FALSE,
smooth = FALSE, type = "square", randomSeed = NULL,
layoutMatrix = NULL)
)
})
#build whole network graph
output$wg = renderVisNetwork(wg)
#get catname
output$catname = renderText(paste0(input$cat,' 연관 데이터 테이블'))
#build whole network graph
ap_df = reactive({
apriori_results(input$cat)
})
output$recommend =  DT::renderDataTable(DT::datatable({
data = sapply(ap_df(),function(x){gsub("\'","",x)}) %>% as.data.frame
}))
w2vd = eventReactive(input$dow2v,{
w2v(input$service_question)
})
output$w2vres = DT::renderDataTable(DT::datatable({
data = w2vd()
}))
}
shinyApp(ui,server)
shinyApp(ui,server)
shinyApp(ui,server)
ui = fluidPage(
#Define main title
titlePanel('엣.지.있게'),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput('cat','서비스 카테고리 :',choices = unique(df$service_category),
selected = unique(df$service_category)[1]),
actionButton('dographbutton','카테고리별 그래프 그리기'),br(),br(),
uiOutput('select_org')
),
#Main panel of sidebar layout
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel('전체 네트워크',br(),
fluidRow(
column(6, align="center", offset = 3,
actionButton('update','UPDATE'),
tags$style(type='text/css', "#button { vertical-align- middle; height- 50px; width- 100%; font-size- 30px;}")
)),
br(),
visNetworkOutput('wg',height = '600px')
),
tabPanel("카테고리별 네트워크",
h2('서비스 카테고리 별 네트워크'),
br(),br(),
visNetworkOutput('catgraph',height = '500px'),br(),
h2(textOutput('catname')),br(),
DT::dataTableOutput('recommend')
),
tabPanel("API 데이터 정보",h2('API 데이터 추천'),br(),
textAreaInput('service_question','무슨 서비스를 하고 싶으신가요?',
width = 600,height = 160),
actionButton("dow2v", "답변 해주기", icon = icon("comments")),br(),br(),
DT::dataTableOutput('w2vres')
)
)
)
)
)
server = function(input,output){
#build primitive dataframe based on category
dprime = reactive({
df[which(df$service_category == input$cat),]
})
#update organization selection
output$select_org = renderUI({
checkboxGroupInput('org','제공 기관 :', choices = c('All',dprime() %>% select(start_org,end_org)%>%
unlist%>% unique),selected = 'All')
})
#make desired dataframe(start,edge with organization sorted)
d = eventReactive(input$dographbutton,{
if(TRUE %in% (input$org == 'All')){
df[which(df$service_category == input$cat),]
}
else{
df[which(df$service_category == input$cat),] %>%
filter(start_org %in%  input$org |
end_org %in% input$org)
}
})
#build visnetwork
output$catgraph = renderVisNetwork({
# Make Edges & Nodes
start_nodes = get_start(d())
end_nodes = get_end(d())
nodes =  get_nodes(start_nodes,end_nodes)
edges <- d() %>% select(start, end) %>% rename(from = start, to = end)
node.exp = left_join(nodes,df3[which(unique(df3$id) %in% nodes$id),c(3,1)],by = 'id') %>%
group_by(id) %>% filter(row_number(id)==1)
degree = graph_from_data_frame(d(),directed = F) %>% degree()
degree = data.frame(id = names(degree),degree = degree)
# Allocate informations on network
nodes$color.background <- rainbow_hcl(length(levels(factor(nodes$org))))[factor(nodes$org)]
nodes$title = paste0("데이터명 : ",nodes$id,"<br/>",
'출처 : ',nodes$org,"<br/>",
'같이 사용된 데이터 수 : ',degree[match(nodes$id,degree$id),'degree'],
ifelse(is.na(node.exp$explain)|node.exp$explain=="",'',paste0("<br/>",
'데이터 설명 : ',node.exp$explain)))
nodes$color.border <- "black"
nodes$color.highlight.background <- "orange"
nodes$color.highlight.border <- "darkred"
edges$width = 1+d()$weight/8
edges$color = 'grey'
# Draw circle plot
return(
visNetwork(nodes, edges, width='100%',height='950px') %>%
visOptions(highlightNearest = TRUE,
selectedBy = "org",autoResize = TRUE) %>%
visInteraction(navigationButtons = TRUE,dragNodes = TRUE,
dragView = TRUE, zoomView = TRUE) %>%
visLegend() %>%
visIgraphLayout(layout = "layout_with_mds", physics = FALSE,
smooth = FALSE, type = "square", randomSeed = NULL,
layoutMatrix = NULL)
)
})
#build whole network graph
output$wg = renderVisNetwork(wg)
#get catname
output$catname = renderText(paste0(input$cat,' 연관 데이터 테이블'))
#build whole network graph
ap_df = reactive({
apriori_results(input$cat)
})
output$recommend =  DT::renderDataTable(DT::datatable({
data = sapply(ap_df(),function(x){gsub("\'","",x)}) %>% as.data.frame
}))
w2vd = eventReactive(input$dow2v,{
w2v(input$service_question)
})
output$w2vres = DT::renderDataTable(DT::datatable({
data = w2vd()
}))
}
shinyApp(ui,server)
ui = fluidPage(
#Define main title
titlePanel(img(src = 'HK/logo.jpg'),'엣.지.있게'),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput('cat','서비스 카테고리 :',choices = unique(df$service_category),
selected = unique(df$service_category)[1]),
actionButton('dographbutton','카테고리별 그래프 그리기'),br(),br(),
uiOutput('select_org')
),
#Main panel of sidebar layout
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel('전체 네트워크',br(),
fluidRow(
column(6, align="center", offset = 3,
actionButton('update','UPDATE'),
tags$style(type='text/css', "#button { vertical-align- middle; height- 50px; width- 100%; font-size- 30px;}")
)),
br(),
visNetworkOutput('wg',height = '600px')
),
tabPanel("카테고리별 네트워크",
h2('서비스 카테고리 별 네트워크'),
br(),br(),
visNetworkOutput('catgraph',height = '500px'),br(),
h2(textOutput('catname')),br(),
DT::dataTableOutput('recommend')
),
tabPanel("API 데이터 정보",h2('API 데이터 추천'),br(),
textAreaInput('service_question','무슨 서비스를 하고 싶으신가요?',
width = 600,height = 160),
actionButton("dow2v", "답변 해주기", icon = icon("comments")),br(),br(),
DT::dataTableOutput('w2vres')
)
)
)
)
)
server = function(input,output){
#build primitive dataframe based on category
dprime = reactive({
df[which(df$service_category == input$cat),]
})
#update organization selection
output$select_org = renderUI({
checkboxGroupInput('org','제공 기관 :', choices = c('All',dprime() %>% select(start_org,end_org)%>%
unlist%>% unique),selected = 'All')
})
#make desired dataframe(start,edge with organization sorted)
d = eventReactive(input$dographbutton,{
if(TRUE %in% (input$org == 'All')){
df[which(df$service_category == input$cat),]
}
else{
df[which(df$service_category == input$cat),] %>%
filter(start_org %in%  input$org |
end_org %in% input$org)
}
})
#build visnetwork
output$catgraph = renderVisNetwork({
# Make Edges & Nodes
start_nodes = get_start(d())
end_nodes = get_end(d())
nodes =  get_nodes(start_nodes,end_nodes)
edges <- d() %>% select(start, end) %>% rename(from = start, to = end)
node.exp = left_join(nodes,df3[which(unique(df3$id) %in% nodes$id),c(3,1)],by = 'id') %>%
group_by(id) %>% filter(row_number(id)==1)
degree = graph_from_data_frame(d(),directed = F) %>% degree()
degree = data.frame(id = names(degree),degree = degree)
# Allocate informations on network
nodes$color.background <- rainbow_hcl(length(levels(factor(nodes$org))))[factor(nodes$org)]
nodes$title = paste0("데이터명 : ",nodes$id,"<br/>",
'출처 : ',nodes$org,"<br/>",
'같이 사용된 데이터 수 : ',degree[match(nodes$id,degree$id),'degree'],
ifelse(is.na(node.exp$explain)|node.exp$explain=="",'',paste0("<br/>",
'데이터 설명 : ',node.exp$explain)))
nodes$color.border <- "black"
nodes$color.highlight.background <- "orange"
nodes$color.highlight.border <- "darkred"
edges$width = 1+d()$weight/8
edges$color = 'grey'
# Draw circle plot
return(
visNetwork(nodes, edges, width='100%',height='950px') %>%
visOptions(highlightNearest = TRUE,
selectedBy = "org",autoResize = TRUE) %>%
visInteraction(navigationButtons = TRUE,dragNodes = TRUE,
dragView = TRUE, zoomView = TRUE) %>%
visLegend() %>%
visIgraphLayout(layout = "layout_with_mds", physics = FALSE,
smooth = FALSE, type = "square", randomSeed = NULL,
layoutMatrix = NULL)
)
})
#build whole network graph
output$wg = renderVisNetwork(wg)
#get catname
output$catname = renderText(paste0(input$cat,' 연관 데이터 테이블'))
#build whole network graph
ap_df = reactive({
apriori_results(input$cat)
})
output$recommend =  DT::renderDataTable(DT::datatable({
data = sapply(ap_df(),function(x){gsub("\'","",x)}) %>% as.data.frame
}))
w2vd = eventReactive(input$dow2v,{
w2v(input$service_question)
})
output$w2vres = DT::renderDataTable(DT::datatable({
data = w2vd()
}))
}
shinyApp(ui,server)
img(src = logo.jp)
img(src = logo.jpg)
img(src = 'logo.jpg')
ui = fluidPage(
#Define main title
titlePanel(img(src = 'logo.jpg'),'엣.지.있게'),
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
selectInput('cat','서비스 카테고리 :',choices = unique(df$service_category),
selected = unique(df$service_category)[1]),
actionButton('dographbutton','카테고리별 그래프 그리기'),br(),br(),
uiOutput('select_org')
),
#Main panel of sidebar layout
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel('전체 네트워크',br(),
fluidRow(
column(6, align="center", offset = 3,
actionButton('update','UPDATE'),
tags$style(type='text/css', "#button { vertical-align- middle; height- 50px; width- 100%; font-size- 30px;}")
)),
br(),
visNetworkOutput('wg',height = '600px')
),
tabPanel("카테고리별 네트워크",
h2('서비스 카테고리 별 네트워크'),
br(),br(),
visNetworkOutput('catgraph',height = '500px'),br(),
h2(textOutput('catname')),br(),
DT::dataTableOutput('recommend')
),
tabPanel("API 데이터 정보",h2('API 데이터 추천'),br(),
textAreaInput('service_question','무슨 서비스를 하고 싶으신가요?',
width = 600,height = 160),
actionButton("dow2v", "답변 해주기", icon = icon("comments")),br(),br(),
DT::dataTableOutput('w2vres')
)
)
)
)
)
server = function(input,output){
#build primitive dataframe based on category
dprime = reactive({
df[which(df$service_category == input$cat),]
})
#update organization selection
output$select_org = renderUI({
checkboxGroupInput('org','제공 기관 :', choices = c('All',dprime() %>% select(start_org,end_org)%>%
unlist%>% unique),selected = 'All')
})
#make desired dataframe(start,edge with organization sorted)
d = eventReactive(input$dographbutton,{
if(TRUE %in% (input$org == 'All')){
df[which(df$service_category == input$cat),]
}
else{
df[which(df$service_category == input$cat),] %>%
filter(start_org %in%  input$org |
end_org %in% input$org)
}
})
#build visnetwork
output$catgraph = renderVisNetwork({
# Make Edges & Nodes
start_nodes = get_start(d())
end_nodes = get_end(d())
nodes =  get_nodes(start_nodes,end_nodes)
edges <- d() %>% select(start, end) %>% rename(from = start, to = end)
node.exp = left_join(nodes,df3[which(unique(df3$id) %in% nodes$id),c(3,1)],by = 'id') %>%
group_by(id) %>% filter(row_number(id)==1)
degree = graph_from_data_frame(d(),directed = F) %>% degree()
degree = data.frame(id = names(degree),degree = degree)
# Allocate informations on network
nodes$color.background <- rainbow_hcl(length(levels(factor(nodes$org))))[factor(nodes$org)]
nodes$title = paste0("데이터명 : ",nodes$id,"<br/>",
'출처 : ',nodes$org,"<br/>",
'같이 사용된 데이터 수 : ',degree[match(nodes$id,degree$id),'degree'],
ifelse(is.na(node.exp$explain)|node.exp$explain=="",'',paste0("<br/>",
'데이터 설명 : ',node.exp$explain)))
nodes$color.border <- "black"
nodes$color.highlight.background <- "orange"
nodes$color.highlight.border <- "darkred"
edges$width = 1+d()$weight/8
edges$color = 'grey'
# Draw circle plot
return(
visNetwork(nodes, edges, width='100%',height='950px') %>%
visOptions(highlightNearest = TRUE,
selectedBy = "org",autoResize = TRUE) %>%
visInteraction(navigationButtons = TRUE,dragNodes = TRUE,
dragView = TRUE, zoomView = TRUE) %>%
visLegend() %>%
visIgraphLayout(layout = "layout_with_mds", physics = FALSE,
smooth = FALSE, type = "square", randomSeed = NULL,
layoutMatrix = NULL)
)
})
#build whole network graph
output$wg = renderVisNetwork(wg)
#get catname
output$catname = renderText(paste0(input$cat,' 연관 데이터 테이블'))
#build whole network graph
ap_df = reactive({
apriori_results(input$cat)
})
output$recommend =  DT::renderDataTable(DT::datatable({
data = sapply(ap_df(),function(x){gsub("\'","",x)}) %>% as.data.frame
}))
w2vd = eventReactive(input$dow2v,{
w2v(input$service_question)
})
output$w2vres = DT::renderDataTable(DT::datatable({
data = w2vd()
}))
}
shinyApp(ui,server)
png('logo.jpg')
