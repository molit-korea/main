# This is a sample configuration file for running the GeoServer Catalog against a PostgreSQL 
# database.
#
# Set the jndiName for a JNDI dataSource provided by your container, or set the jdbcUrl, username, 
# password, and pool.* parameters appropriately to connect directly. If both are specified, then 
# JNDI lookup will be attempted first, and a direct JDBC connection if that fails.
#
# Note the initialization DDL script for PostgreSQL must have been run before starting GeoServer.
# The initialization script is located in the jdbcstore_scripts directory, named 
# 'initdb.postgres.sql'.
#
# The import configuration option tells GeoServer whether to import the current catalog from the 
# file system to the database or not. If set to true, it will be imported and the config option will
# be set the value 'false' for the next start up to avoid trying to re-import the catalog 
# configuration.

#
# Use jdbcstore.  Turn off to use the data directory for all configuration instead.
#
enabled=true

#
# Initialize an empty database.  Should be set to false and done manually before starting GeoServer 
# when using Postgres
#
initdb=true
initScript=jdbcstore/scripts/init.postgres.sql

#
# Import the data directory into a new database.  Should only be used on the first run.
#
import=true

#
# The JNDI name for the data source.  Uncomment to use JNDI.
#
#jndiName=java\:/comp/env/jdbc/gsconfig

#
# JDBC direct connection parameters.  Comment out following lines if using JNDI and you don't want 
# a fallback.
#
jdbcUrl=jdbc:postgresql://localhost:5432/gsstore
driverClassName=org.postgresql.Driver
username=postgres
password=

#
# connection pooling/management parameters
#

# minimum connections in pool  
pool.minIdle=4

# maximum connections in pool
pool.maxActive=10

# whether to pool prepared statements
pool.poolPreparedStatements=true

# size of prepared statement cache, only used if pool.poolPreparedStatements = true 
pool.maxOpenPreparedStatements=50

# whether to validate connections when obtaining from the pool
pool.testOnBorrow=true

# validation query for connections from pool, must be set when pool.testOnBorrow = true
pool.validationQuery=SELECT now()



# when renaming, delete destination if file exists (linux style)
deleteDestinationOnRename=true

# leave the following directories on the filesystem -- no spaces!
ignoreDirs=data,jdbcstore,jdbcconfig,temp,tmp,logs
