<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <artifactId>gs-docs</artifactId>
  <groupId>org.geoserver.en</groupId>
  <version>2.17-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>GeoServer English Documentation</name>
  <description>GeoServer English documentation</description>

  <licenses>
    <license>
      <name>Creative Commmons Attribution 4.0 International</name>
      <url>https://creativecommons.org/licenses/by/4.0/</url>
    </license>
  </licenses>
  
  <dependencies>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-codegen-maven-plugin</artifactId>
        <version>2.2.2</version>
        <executions>
          <!-- one execution per page -->
          <execution>
            <id>coverages</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/coverages.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/coverages</output>
            </configuration>
          </execution>
          <execution>
            <id>coverageStores</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/coveragestores.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/coveragestores</output>
            </configuration>
          </execution>
          <execution>
            <id>datastores</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/datastores.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/datastores</output>
            </configuration>
          </execution>
          <execution>
            <id>featureTypes</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/featuretypes.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/featuretypes</output>
            </configuration>
          </execution>          
          <execution>
            <id>fonts</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/fonts.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/fonts</output>
            </configuration>
          </execution>
          <execution>
            <id>layergroups</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/layergroups.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/layergroups</output>
            </configuration>
          </execution>
          <execution>
            <id>layers</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/layers.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/layers</output>
            </configuration>
          </execution>
          <execution>
            <id>manifests</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/manifests.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/manifests</output>
            </configuration>
          </execution>
          <execution>
            <id>namespaces</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/namespaces.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/namespaces</output>
            </configuration>
          </execution>
          <execution>
            <id>owsServices</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/owsservices.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/owsservices</output>
            </configuration>
          </execution>
          <execution>
            <id>reload</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/reload.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/reload</output>
            </configuration>
          </execution>
          <execution>
            <id>security</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/security.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/security</output>
            </configuration>
          </execution>          
          <execution>
            <id>settings</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/settings.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/settings</output>
            </configuration>
          </execution>
          <execution>
            <id>structuredCoverages</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/structuredcoverages.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/structuredcoverages</output>
            </configuration>
          </execution>
          <execution>
            <id>styles</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/styles.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/styles</output>
            </configuration>
          </execution>
          <execution>
            <id>template</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/templates.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/templates</output>
            </configuration>
          </execution>
          <execution>
            <id>wmslayers</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/wmslayers.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/wmslayers</output>
            </configuration>
          </execution>
          <execution>
            <id>wmsstores</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/wmsstores.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/wmsstores</output>
            </configuration>
          </execution>
          <execution>
            <id>wmtslayers</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/wmtslayers.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/wmtslayers</output>
            </configuration>
          </execution>
          <execution>
            <id>wmtsstores</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/wmtsstores.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/wmtsstores</output>
            </configuration>
          </execution>
          <execution>
            <id>workspaces</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/workspaces.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/workspaces</output>
            </configuration>
          </execution>
          <execution>
            <id>monitoring</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/monitoring.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/monitoring</output>
            </configuration>
          </execution>
          <execution>
            <id>importer</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/importer.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/importer</output>
            </configuration>
          </execution>
          <execution>
            <id>importer-transforms</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/importerTransforms.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/importerTransforms</output>
            </configuration>
          </execution>
          <execution>
            <id>importer-tasks</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/importerTasks.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/importerTasks</output>
            </configuration>
          </execution>
          <execution>
            <id>importer-data</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/importerData.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/importerData</output>
            </configuration>
          </execution>
          <execution>
            <id>metadata</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/api/1.0.0/metadata.yaml</inputSpec>
              <language>html</language>
              <output>${project.build.directory}/api/metadata</output>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>ant</groupId>
            <artifactId>ant</artifactId>
            <version>1.6.5</version>
          </dependency>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <configuration>
              <tasks>
                <ant antfile="build.xml" dir="${basedir}" target="${target}">
                  <property name="build.directory" value="${project.build.directory}"/>
                  <property name="project.version" value="${project.version}"/>
                </ant>
              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <descriptors>
            <descriptor>release/user.xml</descriptor>
            <descriptor>release/developer.xml</descriptor>
            <descriptor>release/docguide.xml</descriptor>
          </descriptors>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
  <!-- sphinx build targets - default to full -->
  <properties>
     <target>full</target>
  </properties>
  <profiles>
    <profile>
      <id>docguide</id>
      <properties>
        <target>docguide</target>
      </properties>
    </profile>
    <profile>
      <id>user</id>
      <properties>
        <target>user</target>
      </properties>
    </profile>
    <profile>
      <id>developer</id>
      <properties>
        <target>developer</target>
      </properties>
    </profile>
  </profiles>
  
</project>
